name: Go

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: "cr.selcloud.ru/practice"
  IMAGE_NAME: "chat-service"
  CONTAINER_NAME: "chat-service-container"
  REGISTRY_USER: "token"
  GRPC_PORT: "50052"


jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v3
        - name: Set up Go
          uses: actions/setup-go@v4
          with:
            go-version: '1.22'
            cache-dependency-path: go.sum
        - name: Build
          run: go build -o ./bin/ -v ./...
        - name: Test
          run: go test -v ./...

  linter:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.53
          # Optional: working directory, useful for monorepos
          # working-directory: somedir
          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          args: --timeout=30m --config=./.golangci.pipeline.yaml --issues-exit-code=0
          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true
          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true
          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true
          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true
          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

  image-build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout main
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Registry
        run: docker login -u $REGISTRY_USER -p ${{ secrets.SEL_CR_PASS }} $REGISTRY
      - name: Build and Push Docker Image APP
        run: |
          export TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME .
#      - name: Build and Push Docker Image Migrator
#        run: |
#          docker buildx create --use
#          docker buildx build --no-cache --push --tag $REGISTRY/migrator:latest -f Dockerfile.Migrator . 

  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push
    steps:
      - name: Checkout main
        uses: actions/checkout@v3
#      - name: Copy docker-compose.yaml
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SSH_USERNAME }}
#          key: ${{ secrets.SSH_KEY }}
#          source: "docker-compose.yaml"
#          target: .
      - name: Copy migrations
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "migrations"
          target: ./chat-service/
      - name: Deploy to Selectel Cloud via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME,REGISTRY_USER,GRPC_PORT
          script: |
            
            # Set up variables
            echo "" > .env
            export TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            echo "TAG_NAME=$TAG_NAME" >> .env
            echo "IMAGE_NAME=$IMAGE_NAME" >> .env
            echo "REGISTRY=$REGISTRY" >> .env
            echo "IMAGE_NAME=$IMAGE_NAME" >> .env
            echo "CONTAINER_NAME=$CONTAINER_NAME" >> .env
            echo "GRPC_PORT=$GRPC_PORT" >> .env

            cat .secrets/chat.env >> .env

            # Login into Selectel Registry
            sudo docker login -u $REGISTRY_USER -p ${{ secrets.SEL_CR_PASS }} $REGISTRY
            
            # Stop running container
            sudo docker compose down chat
            
            sudo docker compose up -d chat chat-migrator