// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/pillarion/practice-chat-server/internal/core/port/repository/chat.Repo -o repo_minimock.go -n RepoMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	desc "github.com/pillarion/practice-chat-server/internal/core/model/chat"
)

// RepoMock implements chat.Repo
type RepoMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDelete          func(ctx context.Context, id int64) (err error)
	inspectFuncDelete   func(ctx context.Context, id int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mRepoMockDelete

	funcInsert          func(ctx context.Context, username []desc.Username) (i1 int64, err error)
	inspectFuncInsert   func(ctx context.Context, username []desc.Username)
	afterInsertCounter  uint64
	beforeInsertCounter uint64
	InsertMock          mRepoMockInsert
}

// NewRepoMock returns a mock for chat.Repo
func NewRepoMock(t minimock.Tester) *RepoMock {
	m := &RepoMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteMock = mRepoMockDelete{mock: m}
	m.DeleteMock.callArgs = []*RepoMockDeleteParams{}

	m.InsertMock = mRepoMockInsert{mock: m}
	m.InsertMock.callArgs = []*RepoMockInsertParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRepoMockDelete struct {
	mock               *RepoMock
	defaultExpectation *RepoMockDeleteExpectation
	expectations       []*RepoMockDeleteExpectation

	callArgs []*RepoMockDeleteParams
	mutex    sync.RWMutex
}

// RepoMockDeleteExpectation specifies expectation struct of the Repo.Delete
type RepoMockDeleteExpectation struct {
	mock    *RepoMock
	params  *RepoMockDeleteParams
	results *RepoMockDeleteResults
	Counter uint64
}

// RepoMockDeleteParams contains parameters of the Repo.Delete
type RepoMockDeleteParams struct {
	ctx context.Context
	id  int64
}

// RepoMockDeleteResults contains results of the Repo.Delete
type RepoMockDeleteResults struct {
	err error
}

// Expect sets up expected params for Repo.Delete
func (mmDelete *mRepoMockDelete) Expect(ctx context.Context, id int64) *mRepoMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("RepoMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &RepoMockDeleteExpectation{}
	}

	mmDelete.defaultExpectation.params = &RepoMockDeleteParams{ctx, id}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the Repo.Delete
func (mmDelete *mRepoMockDelete) Inspect(f func(ctx context.Context, id int64)) *mRepoMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for RepoMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by Repo.Delete
func (mmDelete *mRepoMockDelete) Return(err error) *RepoMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("RepoMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &RepoMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &RepoMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the Repo.Delete method
func (mmDelete *mRepoMockDelete) Set(f func(ctx context.Context, id int64) (err error)) *RepoMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the Repo.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the Repo.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the Repo.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mRepoMockDelete) When(ctx context.Context, id int64) *RepoMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("RepoMock.Delete mock is already set by Set")
	}

	expectation := &RepoMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &RepoMockDeleteParams{ctx, id},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up Repo.Delete return parameters for the expectation previously defined by the When method
func (e *RepoMockDeleteExpectation) Then(err error) *RepoMock {
	e.results = &RepoMockDeleteResults{err}
	return e.mock
}

// Delete implements chat.Repo
func (mmDelete *RepoMock) Delete(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, id)
	}

	mm_params := RepoMockDeleteParams{ctx, id}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_got := RepoMockDeleteParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("RepoMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the RepoMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, id)
	}
	mmDelete.t.Fatalf("Unexpected call to RepoMock.Delete. %v %v", ctx, id)
	return
}

// DeleteAfterCounter returns a count of finished RepoMock.Delete invocations
func (mmDelete *RepoMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of RepoMock.Delete invocations
func (mmDelete *RepoMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to RepoMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mRepoMockDelete) Calls() []*RepoMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*RepoMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *RepoMock) MinimockDeleteDone() bool {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteInspect logs each unmet expectation
func (m *RepoMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepoMock.Delete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepoMock.Delete")
		} else {
			m.t.Errorf("Expected call to RepoMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		m.t.Error("Expected call to RepoMock.Delete")
	}
}

type mRepoMockInsert struct {
	mock               *RepoMock
	defaultExpectation *RepoMockInsertExpectation
	expectations       []*RepoMockInsertExpectation

	callArgs []*RepoMockInsertParams
	mutex    sync.RWMutex
}

// RepoMockInsertExpectation specifies expectation struct of the Repo.Insert
type RepoMockInsertExpectation struct {
	mock    *RepoMock
	params  *RepoMockInsertParams
	results *RepoMockInsertResults
	Counter uint64
}

// RepoMockInsertParams contains parameters of the Repo.Insert
type RepoMockInsertParams struct {
	ctx      context.Context
	username []desc.Username
}

// RepoMockInsertResults contains results of the Repo.Insert
type RepoMockInsertResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for Repo.Insert
func (mmInsert *mRepoMockInsert) Expect(ctx context.Context, username []desc.Username) *mRepoMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("RepoMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &RepoMockInsertExpectation{}
	}

	mmInsert.defaultExpectation.params = &RepoMockInsertParams{ctx, username}
	for _, e := range mmInsert.expectations {
		if minimock.Equal(e.params, mmInsert.defaultExpectation.params) {
			mmInsert.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInsert.defaultExpectation.params)
		}
	}

	return mmInsert
}

// Inspect accepts an inspector function that has same arguments as the Repo.Insert
func (mmInsert *mRepoMockInsert) Inspect(f func(ctx context.Context, username []desc.Username)) *mRepoMockInsert {
	if mmInsert.mock.inspectFuncInsert != nil {
		mmInsert.mock.t.Fatalf("Inspect function is already set for RepoMock.Insert")
	}

	mmInsert.mock.inspectFuncInsert = f

	return mmInsert
}

// Return sets up results that will be returned by Repo.Insert
func (mmInsert *mRepoMockInsert) Return(i1 int64, err error) *RepoMock {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("RepoMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &RepoMockInsertExpectation{mock: mmInsert.mock}
	}
	mmInsert.defaultExpectation.results = &RepoMockInsertResults{i1, err}
	return mmInsert.mock
}

// Set uses given function f to mock the Repo.Insert method
func (mmInsert *mRepoMockInsert) Set(f func(ctx context.Context, username []desc.Username) (i1 int64, err error)) *RepoMock {
	if mmInsert.defaultExpectation != nil {
		mmInsert.mock.t.Fatalf("Default expectation is already set for the Repo.Insert method")
	}

	if len(mmInsert.expectations) > 0 {
		mmInsert.mock.t.Fatalf("Some expectations are already set for the Repo.Insert method")
	}

	mmInsert.mock.funcInsert = f
	return mmInsert.mock
}

// When sets expectation for the Repo.Insert which will trigger the result defined by the following
// Then helper
func (mmInsert *mRepoMockInsert) When(ctx context.Context, username []desc.Username) *RepoMockInsertExpectation {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("RepoMock.Insert mock is already set by Set")
	}

	expectation := &RepoMockInsertExpectation{
		mock:   mmInsert.mock,
		params: &RepoMockInsertParams{ctx, username},
	}
	mmInsert.expectations = append(mmInsert.expectations, expectation)
	return expectation
}

// Then sets up Repo.Insert return parameters for the expectation previously defined by the When method
func (e *RepoMockInsertExpectation) Then(i1 int64, err error) *RepoMock {
	e.results = &RepoMockInsertResults{i1, err}
	return e.mock
}

// Insert implements chat.Repo
func (mmInsert *RepoMock) Insert(ctx context.Context, username []desc.Username) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmInsert.beforeInsertCounter, 1)
	defer mm_atomic.AddUint64(&mmInsert.afterInsertCounter, 1)

	if mmInsert.inspectFuncInsert != nil {
		mmInsert.inspectFuncInsert(ctx, username)
	}

	mm_params := RepoMockInsertParams{ctx, username}

	// Record call args
	mmInsert.InsertMock.mutex.Lock()
	mmInsert.InsertMock.callArgs = append(mmInsert.InsertMock.callArgs, &mm_params)
	mmInsert.InsertMock.mutex.Unlock()

	for _, e := range mmInsert.InsertMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmInsert.InsertMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInsert.InsertMock.defaultExpectation.Counter, 1)
		mm_want := mmInsert.InsertMock.defaultExpectation.params
		mm_got := RepoMockInsertParams{ctx, username}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInsert.t.Errorf("RepoMock.Insert got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInsert.InsertMock.defaultExpectation.results
		if mm_results == nil {
			mmInsert.t.Fatal("No results are set for the RepoMock.Insert")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmInsert.funcInsert != nil {
		return mmInsert.funcInsert(ctx, username)
	}
	mmInsert.t.Fatalf("Unexpected call to RepoMock.Insert. %v %v", ctx, username)
	return
}

// InsertAfterCounter returns a count of finished RepoMock.Insert invocations
func (mmInsert *RepoMock) InsertAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.afterInsertCounter)
}

// InsertBeforeCounter returns a count of RepoMock.Insert invocations
func (mmInsert *RepoMock) InsertBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.beforeInsertCounter)
}

// Calls returns a list of arguments used in each call to RepoMock.Insert.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInsert *mRepoMockInsert) Calls() []*RepoMockInsertParams {
	mmInsert.mutex.RLock()

	argCopy := make([]*RepoMockInsertParams, len(mmInsert.callArgs))
	copy(argCopy, mmInsert.callArgs)

	mmInsert.mutex.RUnlock()

	return argCopy
}

// MinimockInsertDone returns true if the count of the Insert invocations corresponds
// the number of defined expectations
func (m *RepoMock) MinimockInsertDone() bool {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		return false
	}
	return true
}

// MinimockInsertInspect logs each unmet expectation
func (m *RepoMock) MinimockInsertInspect() {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepoMock.Insert with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		if m.InsertMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepoMock.Insert")
		} else {
			m.t.Errorf("Expected call to RepoMock.Insert with params: %#v", *m.InsertMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		m.t.Error("Expected call to RepoMock.Insert")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepoMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeleteInspect()

			m.MinimockInsertInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteDone() &&
		m.MinimockInsertDone()
}
